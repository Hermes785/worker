pipeline {
    agent any

    environment {
        APP_NAME = "convertissor_worker_img"
        DOCKER_IMAGE = "${APP_NAME}:${env.BUILD_ID}"
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        VENV_DIR = "venv"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    // Installation de Python si nécessaire
                    sh 'python3 -m venv ${VENV_DIR}'
                    sh 'source ${VENV_DIR}/bin/activate && pip install --upgrade pip'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh 'source ${VENV_DIR}/bin/activate && pip install -r requirements.txt'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh 'source ${VENV_DIR}/bin/activate && pytest tests/'
                }
            }
        }

        stage('Build Docker Image and Push to Registry') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def fullImageName = "docker.io/hermesn/convertissor_worker:${env.BUILD_ID}"
                        echo "Building Docker image ${fullImageName}"
                        sh "docker build -t ${DOCKER_IMAGE} ."
                        sh "docker tag ${DOCKER_IMAGE} ${fullImageName}"
                        sh "docker tag ${DOCKER_IMAGE} docker.io/hermesn/convertissor_worker:latest"
                        sh "docker push ${fullImageName}"
                        sh "docker push docker.io/hermesn/convertissor_worker:latest"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    sh '''
                    docker stop worker_container || echo "Container not running"
                    docker rm worker_container || echo "Container does not exist"
                    docker pull docker.io/hermesn/convertissor_worker:latest
                    docker-compose -f docker-compose.yml up -d
                    '''
                }
            }
        }

        stage('Clean Up Docker Resources') {
            steps {
                script {
                    sh 'docker image prune -af'
                    sh 'docker container prune -f'
                    sh 'docker volume prune -f'
                    sh 'docker network prune -f'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed! Check the logs.'
        }
    }
}
