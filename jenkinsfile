pipeline {
    agent any

    environment {
        APP_NAME = "convertissor_worker_img"
        DOCKER_IMAGE = "${APP_NAME}:${env.BUILD_ID}"
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    sh '''
                      apt-get update
                      apt-get install python3
                     apt-get install python3-pip
                    '''
                }
            }
        }

        stage('Check for requirements.txt') {
            steps {
                script {
                    // Vérifier si requirements.txt existe bien dans le répertoire
                    def requirementsExist = fileExists 'requirements.txt'
                    if (!requirementsExist) {
                        error "Le fichier 'requirements.txt' est manquant dans le dépôt !"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh 'bash -c "source venv/bin/activate && pip install -r requirements.txt"'
                }
            }
        }

       

        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def fullImageName = "docker.io/hermesn/convertissor_worker:${env.BUILD_ID}"
                        echo "Building Docker image ${fullImageName}"

                        sh '''
                        docker build -t ${DOCKER_IMAGE} .
                        docker tag ${DOCKER_IMAGE} ${fullImageName}
                        docker tag ${DOCKER_IMAGE} docker.io/hermesn/convertissor_worker:latest
                        docker push ${fullImageName}
                        docker push docker.io/hermesn/convertissor_worker:latest
                        '''
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    sh '''
                    docker stop worker_container || true
                    docker rm worker_container || true
                    docker-compose -f docker-compose.yml pull
                    docker-compose -f docker-compose.yml up -d
                    '''
                }
            }
        }

        stage('Cleanup Unused Images') {
            steps {
                script {
                    sh '''
                    docker image prune -af
                    docker container prune -f
                    docker volume prune -f
                    docker network prune -f
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
