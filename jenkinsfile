pipeline {
    agent any

    environment {
        APP_NAME = "convertissor_worker_img"
        DOCKER_IMAGE = "${APP_NAME}:${env.BUILD_ID}"
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    sh '''
                    # Installer python3-venv si nécessaire (Debian/Ubuntu)
                    if ! command -v python3 -m venv >/dev/null 2>&1; then
                        sudo apt update && sudo apt install -y python3-venv
                    fi

                    # Créer et activer l'environnement virtuel
                    python3 -m venv venv
                    venv/bin/python -m pip install --upgrade pip
                     pip install --no-cache-dir pymupdf
                    venv/bin/python -m pip freeze > requirements.txt
                   
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                    venv/bin/python -m pip install -r requirements.txt

                    # Suppression de fitz s'il pose problème
                    rm -rf fitz || true
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def fullImageName = "docker.io/hermesn/convertissor_worker:${env.BUILD_ID}"
                        echo "Building Docker image ${fullImageName}"

                        sh "docker build -t ${DOCKER_IMAGE} ."
                        sh "docker tag ${DOCKER_IMAGE} ${fullImageName}"
                        sh "docker tag ${DOCKER_IMAGE} docker.io/hermesn/convertissor_worker:latest"
                        sh "docker push ${fullImageName}"
                        sh "docker push docker.io/hermesn/convertissor_worker:latest"

                        echo "Docker image pushed successfully!"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    sh '''
                    docker stop worker_container || true
                    docker rm worker_container || true
                    docker-compose -f docker-compose.yml pull
                    docker-compose -f docker-compose.yml up -d
                    '''
                }
            }
        }

        stage('Cleanup Unused Images') {
            steps {
                script {
                    sh '''
                    docker image prune -af
                    docker volume prune -f
                    docker network prune -f
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
